// src/services/proyectoService.js
/**
 * Servicio para manejar la l√≥gica de negocio relacionada con proyectos.
 * @class
 */
import ProyectoRepository from '../repositories/proyectoRepository.js';
import ApiError from '../utils/ApiError.js';

class ProyectoService {
  /**
   * Crea una instancia del servicio.
   * Inicializa el repositorio de proyectos.
   */
  constructor() {
    /**
     * Instancia del repositorio de proyectos.
     * @type {ProyectoRepository}
     */
    this.proyectoRepository = new ProyectoRepository();
  }

  /**
   * Crea un nuevo proyecto.
   * @async
   * @param {Object} proyectoData - Datos del proyecto a crear.
   * @returns {Promise<Object>} El proyecto creado.
   */
  async crearProyecto(proyectoData) {
    return this.proyectoRepository.crearProyecto(proyectoData);
  }

  /**
   * Obtiene un proyecto por su ID.
   * @async
   * @param {number} id - ID del proyecto a obtener.
   * @returns {Promise<Object>} El proyecto encontrado.
   * @throws {ApiError} Si el proyecto no se encuentra.
   */
  async obtenerProyecto(id) {
    const proyecto = await this.proyectoRepository.obtenerProyectoPorId(id);
    
    if (!proyecto) {
      throw new ApiError('Proyecto no encontrado', 404);
    }
    
    return proyecto;
  }

  /**
   * Actualiza un proyecto existente.
   * @async
   * @param {number} id - ID del proyecto a actualizar.
   * @param {Object} proyectoData - Datos a actualizar.
   * @returns {Promise<Object>} El proyecto actualizado.
   * @throws {ApiError} Si el proyecto no se encuentra.
   */
  async actualizarProyecto(id, proyectoData) {
    const proyecto = await this.proyectoRepository.actualizarProyecto(id, proyectoData);
    
    if (!proyecto) {
      throw new ApiError('Proyecto no encontrado', 404);
    }
    
    return proyecto;
  }

  /**
   * Elimina un proyecto existente.
   * @async
   * @param {number} id - ID del proyecto a eliminar.
   * @returns {Promise<Object>} El proyecto eliminado.
   * @throws {ApiError} Si el proyecto no se encuentra.
   */
  async eliminarProyecto(id) {
    const deleted = await this.proyectoRepository.eliminarProyecto(id);
    
    if (!deleted) {
      throw new ApiError('Proyecto no encontrado', 404);
    }
    
    return deleted;
  }

  /**
   * Lista todos los proyectos, opcionalmente filtrados por estado.
   * @async
   * @param {string} [estado] - Estado para filtrar los proyectos.
   * @returns {Promise<Array>} Lista de proyectos.
   */
  async listarProyectos(estado) {
    return this.proyectoRepository.listarProyectos(estado);
  }
}

export default ProyectoService;