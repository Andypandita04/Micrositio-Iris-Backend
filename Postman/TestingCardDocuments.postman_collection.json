{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "Testing Card Documents API",
		"description": "API para gestión de documentos en Testing Cards con soporte para subida de archivos hasta 50MB",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Upload Document",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201 or 413\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 413]);",
							"});",
							"",
							"if (pm.response.code === 201) {",
							"    pm.test(\"Response has document data\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('success', true);",
							"        pm.expect(jsonData).to.have.property('data');",
							"        pm.expect(jsonData.data).to.have.property('id');",
							"        pm.expect(jsonData.data).to.have.property('document_url');",
							"        ",
							"        // Guardar el ID del documento para otros requests",
							"        pm.environment.set('document_id', jsonData.data.id);",
							"    });",
							"}",
							"",
							"if (pm.response.code === 413) {",
							"    pm.test(\"File too large error\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData.message).to.include('50MB');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "document",
							"type": "file",
							"src": [],
							"description": "Selecciona un archivo (PDF, imagen, video, etc.) - Máximo 50MB"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/testing-card/{{testing_card_id}}/documents",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"testing-card",
						"{{testing_card_id}}",
						"documents"
					]
				},
				"description": "Sube un documento a una Testing Card específica.\n\n**Instrucciones:**\n1. En 'Body' → 'form-data'\n2. Key: 'document' (tipo File)\n3. Click 'Select Files' y elige tu archivo\n4. Asegúrate de configurar {{testing_card_id}} en las variables\n\n**Restricciones:**\n- Máximo 50MB\n- Tipos permitidos: PDF, imágenes, videos, documentos Office, audio\n\n**Respuestas:**\n- 201: Éxito\n- 400: Archivo no válido\n- 413: Archivo muy grande"
			},
			"response": [
				{
					"name": "Success Response",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "document",
									"type": "file",
									"src": "documento.pdf"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/testing-card/123/documents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"testing-card",
								"123",
								"documents"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"success\": true,\n  \"message\": \"Documento subido exitosamente\",\n  \"data\": {\n    \"id\": \"a1b2c3d4-e5f6-7890-abcd-ef1234567890\",\n    \"testing_card_id\": 123,\n    \"document_name\": \"documento.pdf\",\n    \"document_url\": \"https://supabase-storage-url/documento.pdf\",\n    \"document_type\": \"pdf\",\n    \"created_at\": \"2024-01-25T10:30:00Z\",\n    \"updated_at\": \"2024-01-25T10:30:00Z\"\n  }\n}"
				},
				{
					"name": "File Too Large",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "document",
									"type": "file",
									"src": "archivo_muy_grande.zip"
								}
							]
						},
						"url": {
							"raw": "{{base_url}}/api/testing-card/123/documents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"testing-card",
								"123",
								"documents"
							]
						}
					},
					"status": "Payload Too Large",
					"code": 413,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"success\": false,\n  \"message\": \"El archivo excede el tamaño máximo permitido de 50MB\"\n}"
				}
			]
		},
		{
			"name": "Get Documents by Testing Card",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has documents array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success', true);",
							"    pm.expect(jsonData).to.have.property('data');",
							"    pm.expect(jsonData.data).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Documents have required fields\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.data.length > 0) {",
							"        var document = jsonData.data[0];",
							"        pm.expect(document).to.have.property('id');",
							"        pm.expect(document).to.have.property('document_name');",
							"        pm.expect(document).to.have.property('document_url');",
							"        pm.expect(document).to.have.property('document_type');",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/testing-card/{{testing_card_id}}/documents",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"testing-card",
						"{{testing_card_id}}",
						"documents"
					]
				},
				"description": "Obtiene todos los documentos asociados a una Testing Card específica.\n\n**Variables necesarias:**\n- {{testing_card_id}}: ID de la testing card\n\n**Respuesta:**\nArray con todos los documentos, incluyendo URLs para descargar/visualizar."
			},
			"response": [
				{
					"name": "Success Response",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/testing-card/123/documents",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"testing-card",
								"123",
								"documents"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"success\": true,\n  \"data\": [\n    {\n      \"id\": \"a1b2c3d4-e5f6-7890-abcd-ef1234567890\",\n      \"testing_card_id\": 123,\n      \"document_name\": \"documento.pdf\",\n      \"document_url\": \"https://supabase-storage-url/documento.pdf\",\n      \"document_type\": \"pdf\",\n      \"created_at\": \"2024-01-25T10:30:00Z\",\n      \"updated_at\": \"2024-01-25T10:30:00Z\"\n    },\n    {\n      \"id\": \"b2c3d4e5-f6g7-8901-bcde-f23456789012\",\n      \"testing_card_id\": 123,\n      \"document_name\": \"imagen.jpg\",\n      \"document_url\": \"https://supabase-storage-url/imagen.jpg\",\n      \"document_type\": \"image\",\n      \"created_at\": \"2024-01-25T11:15:00Z\",\n      \"updated_at\": \"2024-01-25T11:15:00Z\"\n    }\n  ]\n}"
				}
			]
		},
		{
			"name": "Delete Document",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200 or 404\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 404]);",
							"});",
							"",
							"if (pm.response.code === 200) {",
							"    pm.test(\"Successful deletion\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('success', true);",
							"        pm.expect(jsonData.message).to.include('eliminado');",
							"    });",
							"}",
							"",
							"if (pm.response.code === 404) {",
							"    pm.test(\"Document not found\", function () {",
							"        var jsonData = pm.response.json();",
							"        pm.expect(jsonData).to.have.property('success', false);",
							"        pm.expect(jsonData.message).to.include('no encontrado');",
							"    });",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/documents/{{document_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"documents",
						"{{document_id}}"
					]
				},
				"description": "Elimina un documento específico del storage y la base de datos.\n\n**Variables necesarias:**\n- {{document_id}}: UUID del documento a eliminar\n\n**Nota:** \nEste endpoint elimina tanto el archivo del storage como el registro de la base de datos."
			},
			"response": [
				{
					"name": "Success Response",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/documents/a1b2c3d4-e5f6-7890-abcd-ef1234567890",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"documents",
								"a1b2c3d4-e5f6-7890-abcd-ef1234567890"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"success\": true,\n  \"message\": \"Documento eliminado exitosamente\"\n}"
				},
				{
					"name": "Document Not Found",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/documents/invalid-uuid",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"documents",
								"invalid-uuid"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n  \"success\": false,\n  \"message\": \"Documento no encontrado\"\n}"
				}
			]
		},
		{
			"name": "Test File Size Limit (Over 50MB)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 413 (Payload Too Large)\", function () {",
							"    pm.response.to.have.status(413);",
							"});",
							"",
							"pm.test(\"Error message mentions 50MB limit\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success', false);",
							"    pm.expect(jsonData.message).to.include('50MB');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "document",
							"type": "file",
							"src": [],
							"description": "Sube un archivo mayor a 50MB para probar el límite"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/testing-card/{{testing_card_id}}/documents",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"testing-card",
						"{{testing_card_id}}",
						"documents"
					]
				},
				"description": "Test específico para verificar que el límite de 50MB funciona correctamente.\n\n**Para probar:**\n1. Busca un archivo mayor a 50MB\n2. Súbelo usando este request\n3. Deberías recibir error 413\n\n**Archivos de prueba sugeridos:**\n- Videos largos (>50MB)\n- Archivos ZIP grandes\n- Imágenes de muy alta resolución"
			},
			"response": []
		},
		{
			"name": "Test Invalid File Type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 (Bad Request)\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Error message mentions file type\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success', false);",
							"    pm.expect(jsonData.message).to.include('no permitido');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "document",
							"type": "file",
							"src": [],
							"description": "Sube un archivo con extensión no permitida (.exe, .bat, etc.)"
						}
					]
				},
				"url": {
					"raw": "{{base_url}}/api/testing-card/{{testing_card_id}}/documents",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"testing-card",
						"{{testing_card_id}}",
						"documents"
					]
				},
				"description": "Test para verificar que solo se permiten tipos de archivo válidos.\n\n**Archivos NO permitidos para probar:**\n- .exe (ejecutables)\n- .bat (scripts)\n- .dll (librerías)\n- .scr (protectores de pantalla)\n\n**Archivos SÍ permitidos:**\n- PDF, DOC, DOCX\n- JPG, PNG, GIF\n- MP4, AVI\n- MP3, WAV"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Validar que las variables necesarias estén configuradas",
					"if (!pm.environment.get('base_url')) {",
					"    console.log('⚠️  Configure la variable base_url (ej: http://localhost:3000)');",
					"}",
					"",
					"if (!pm.environment.get('testing_card_id')) {",
					"    console.log('⚠️  Configure la variable testing_card_id (ej: 123)');",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Script global para todos los requests",
					"pm.test(\"Response time is less than 10000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(10000);",
					"});",
					"",
					"pm.test(\"Response has JSON content-type\", function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000",
			"description": "URL base del servidor"
		},
		{
			"key": "testing_card_id",
			"value": "123",
			"description": "ID de la testing card para las pruebas"
		},
		{
			"key": "document_id",
			"value": "",
			"description": "ID del documento (se establece automáticamente al subir)"
		}
	]
}
